// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** `Rule` represents a validation rule written in the Common Expression
  * Language (CEL) syntax. Each Rule includes a unique identifier, an
  * optional error message, and the CEL expression to evaluate. For more
  * information on CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
  *
  * ```proto
  * message Foo {
  *   option (buf.validate.message).cel = {
  *     id: "foo.bar"
  *     message: "bar must be greater than 0"
  *     expression: "this.bar &gt; 0"
  *   };
  *   int32 bar = 1;
  * }
  * ```
  *
  * @param id
  *   `id` is a string that serves as a machine-readable name for this Rule.
  *   It should be unique within its scope, which could be either a message or a field.
  * @param message
  *   `message` is an optional field that provides a human-readable error message
  *   for this Rule when the CEL expression evaluates to false. If a
  *   non-empty message is provided, any strings resulting from the CEL
  *   expression evaluation are ignored.
  * @param expression
  *   `expression` is the actual CEL expression that will be evaluated for
  *   validation. This string must resolve to either a boolean or a string
  *   value. If the expression evaluates to false or a non-empty string, the
  *   validation is considered failed, and the message is rejected.
  */
@SerialVersionUID(0L)
final case class Rule(
    id: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    message: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    expression: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Rule] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) {
        val __value = id.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (message.isDefined) {
        val __value = message.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (expression.isDefined) {
        val __value = expression.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      message.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      expression.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getId: _root_.scala.Predef.String = id.getOrElse("")
    def clearId: Rule = copy(id = _root_.scala.None)
    def withId(__v: _root_.scala.Predef.String): Rule = copy(id = Option(__v))
    def getMessage: _root_.scala.Predef.String = message.getOrElse("")
    def clearMessage: Rule = copy(message = _root_.scala.None)
    def withMessage(__v: _root_.scala.Predef.String): Rule = copy(message = Option(__v))
    def getExpression: _root_.scala.Predef.String = expression.getOrElse("")
    def clearExpression: Rule = copy(expression = _root_.scala.None)
    def withExpression(__v: _root_.scala.Predef.String): Rule = copy(expression = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => message.orNull
        case 3 => expression.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => message.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => expression.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.Rule.type = build.buf.validate.validate.Rule
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.Rule])
}

object Rule extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.Rule] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.Rule] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.Rule = {
    var __id: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __message: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __expression: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 18 =>
          __message = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 26 =>
          __expression = _root_.scala.Option(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.Rule(
        id = __id,
        message = __message,
        expression = __expression,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.Rule] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.Rule(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        expression = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.Rule(
    id = _root_.scala.None,
    message = _root_.scala.None,
    expression = _root_.scala.None
  )
  implicit class RuleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Rule]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.Rule](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getId)((c_, f_) => c_.copy(id = _root_.scala.Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMessage)((c_, f_) => c_.copy(message = _root_.scala.Option(f_)))
    def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def expression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getExpression)((c_, f_) => c_.copy(expression = _root_.scala.Option(f_)))
    def optionalExpression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.expression)((c_, f_) => c_.copy(expression = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val MESSAGE_FIELD_NUMBER = 2
  final val EXPRESSION_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Option[_root_.scala.Predef.String],
    message: _root_.scala.Option[_root_.scala.Predef.String],
    expression: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.build.buf.validate.validate.Rule = _root_.build.buf.validate.validate.Rule(
    id,
    message,
    expression
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.Rule])
}
