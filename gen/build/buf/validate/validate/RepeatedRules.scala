// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** RepeatedRules describe the rules applied to `repeated` values.
  *
  * @param minItems
  *   `min_items` requires that this field must contain at least the specified
  *   minimum number of items.
  *  
  *   Note that `min_items = 1` is equivalent to setting a field as `required`.
  *  
  *   ```proto
  *   message MyRepeated {
  *     // value must contain at least  2 items
  *     repeated string value = 1 [(buf.validate.field).repeated.min_items = 2];
  *   }
  *   ```
  * @param maxItems
  *   `max_items` denotes that this field must not exceed a
  *   certain number of items as the upper limit. If the field contains more
  *   items than specified, an error message will be generated, requiring the
  *   field to maintain no more than the specified number of items.
  *  
  *   ```proto
  *   message MyRepeated {
  *     // value must contain no more than 3 item(s)
  *     repeated string value = 1 [(buf.validate.field).repeated.max_items = 3];
  *   }
  *   ```
  * @param unique
  *   `unique` indicates that all elements in this field must
  *   be unique. This rule is strictly applicable to scalar and enum
  *   types, with message types not being supported.
  *  
  *   ```proto
  *   message MyRepeated {
  *     // repeated value must contain unique items
  *     repeated string value = 1 [(buf.validate.field).repeated.unique = true];
  *   }
  *   ```
  * @param items
  *   `items` details the rules to be applied to each item
  *   in the field. Even for repeated message fields, validation is executed
  *   against each item unless skip is explicitly specified.
  *  
  *   Note that repeated items are always considered populated. The `required`
  *   rule does not apply.
  *  
  *   ```proto
  *   message MyRepeated {
  *     // The items in the field `value` must follow the specified rules.
  *     repeated string value = 1 [(buf.validate.field).repeated.items = {
  *       string: {
  *         min_len: 3
  *         max_len: 10
  *       }
  *     }];
  *   }
  *   ```
  */
@SerialVersionUID(0L)
final case class RepeatedRules(
    minItems: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    maxItems: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    unique: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    items: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RepeatedRules] with _root_.scalapb.ExtendableMessage[RepeatedRules] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (minItems.isDefined) {
        val __value = minItems.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
      };
      if (maxItems.isDefined) {
        val __value = maxItems.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
      };
      if (unique.isDefined) {
        val __value = unique.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
      };
      if (items.isDefined) {
        val __value = items.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      minItems.foreach { __v =>
        val __m = __v
        _output__.writeUInt64(1, __m)
      };
      maxItems.foreach { __v =>
        val __m = __v
        _output__.writeUInt64(2, __m)
      };
      unique.foreach { __v =>
        val __m = __v
        _output__.writeBool(3, __m)
      };
      items.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getMinItems: _root_.scala.Long = minItems.getOrElse(0L)
    def clearMinItems: RepeatedRules = copy(minItems = _root_.scala.None)
    def withMinItems(__v: _root_.scala.Long): RepeatedRules = copy(minItems = Option(__v))
    def getMaxItems: _root_.scala.Long = maxItems.getOrElse(0L)
    def clearMaxItems: RepeatedRules = copy(maxItems = _root_.scala.None)
    def withMaxItems(__v: _root_.scala.Long): RepeatedRules = copy(maxItems = Option(__v))
    def getUnique: _root_.scala.Boolean = unique.getOrElse(false)
    def clearUnique: RepeatedRules = copy(unique = _root_.scala.None)
    def withUnique(__v: _root_.scala.Boolean): RepeatedRules = copy(unique = Option(__v))
    def getItems: build.buf.validate.validate.FieldRules = items.getOrElse(build.buf.validate.validate.FieldRules.defaultInstance)
    def clearItems: RepeatedRules = copy(items = _root_.scala.None)
    def withItems(__v: build.buf.validate.validate.FieldRules): RepeatedRules = copy(items = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => minItems.orNull
        case 2 => maxItems.orNull
        case 3 => unique.orNull
        case 4 => items.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => minItems.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => maxItems.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => unique.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => items.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.RepeatedRules.type = build.buf.validate.validate.RepeatedRules
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.RepeatedRules])
}

object RepeatedRules extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.RepeatedRules] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.RepeatedRules] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.RepeatedRules = {
    var __minItems: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __maxItems: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __unique: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __items: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __minItems = _root_.scala.Option(_input__.readUInt64())
        case 16 =>
          __maxItems = _root_.scala.Option(_input__.readUInt64())
        case 24 =>
          __unique = _root_.scala.Option(_input__.readBool())
        case 34 =>
          __items = _root_.scala.Option(__items.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FieldRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.RepeatedRules(
        minItems = __minItems,
        maxItems = __maxItems,
        unique = __unique,
        items = __items,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.RepeatedRules] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.RepeatedRules(
        minItems = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        maxItems = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        unique = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        items = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FieldRules]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = build.buf.validate.validate.FieldRules
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.RepeatedRules(
    minItems = _root_.scala.None,
    maxItems = _root_.scala.None,
    unique = _root_.scala.None,
    items = _root_.scala.None
  )
  implicit class RepeatedRulesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.RepeatedRules]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.RepeatedRules](_l) {
    def minItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMinItems)((c_, f_) => c_.copy(minItems = _root_.scala.Option(f_)))
    def optionalMinItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.minItems)((c_, f_) => c_.copy(minItems = f_))
    def maxItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMaxItems)((c_, f_) => c_.copy(maxItems = _root_.scala.Option(f_)))
    def optionalMaxItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.maxItems)((c_, f_) => c_.copy(maxItems = f_))
    def unique: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getUnique)((c_, f_) => c_.copy(unique = _root_.scala.Option(f_)))
    def optionalUnique: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.unique)((c_, f_) => c_.copy(unique = f_))
    def items: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldRules] = field(_.getItems)((c_, f_) => c_.copy(items = _root_.scala.Option(f_)))
    def optionalItems: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.FieldRules]] = field(_.items)((c_, f_) => c_.copy(items = f_))
  }
  final val MIN_ITEMS_FIELD_NUMBER = 1
  final val MAX_ITEMS_FIELD_NUMBER = 2
  final val UNIQUE_FIELD_NUMBER = 3
  final val ITEMS_FIELD_NUMBER = 4
  def of(
    minItems: _root_.scala.Option[_root_.scala.Long],
    maxItems: _root_.scala.Option[_root_.scala.Long],
    unique: _root_.scala.Option[_root_.scala.Boolean],
    items: _root_.scala.Option[build.buf.validate.validate.FieldRules]
  ): _root_.build.buf.validate.validate.RepeatedRules = _root_.build.buf.validate.validate.RepeatedRules(
    minItems,
    maxItems,
    unique,
    items
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.RepeatedRules])
}
