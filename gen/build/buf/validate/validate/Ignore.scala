// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** Specifies how FieldRules.ignore behaves. See the documentation for
  * FieldRules.required for definitions of "populated" and "nullable".
  */
sealed abstract class Ignore(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = build.buf.validate.validate.Ignore
  type RecognizedType = build.buf.validate.validate.Ignore.Recognized
  def isIgnoreUnspecified: _root_.scala.Boolean = false
  def isIgnoreIfUnpopulated: _root_.scala.Boolean = false
  def isIgnoreIfDefaultValue: _root_.scala.Boolean = false
  def isIgnoreAlways: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[Ignore] = build.buf.validate.validate.Ignore
  final def asRecognized: _root_.scala.Option[build.buf.validate.validate.Ignore.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[build.buf.validate.validate.Ignore.Recognized])
}

object Ignore extends _root_.scalapb.GeneratedEnumCompanion[Ignore] {
  sealed trait Recognized extends Ignore
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Ignore] = this
  
  /** Validation is only skipped if it's an unpopulated nullable fields.
    *
    * ```proto
    * syntax="proto3";
    *
    * message Request {
    *   // The uri rule applies to any value, including the empty string.
    *   string foo = 1 [
    *     (buf.validate.field).string.uri = true
    *   ];
    *
    *   // The uri rule only applies if the field is set, including if it's
    *   // set to the empty string.
    *   optional string bar = 2 [
    *     (buf.validate.field).string.uri = true
    *   ];
    *
    *   // The min_items rule always applies, even if the list is empty.
    *   repeated string baz = 3 [
    *     (buf.validate.field).repeated.min_items = 3
    *   ];
    *
    *   // The custom CEL rule applies only if the field is set, including if
    *   // it's the "zero" value of that message.
    *   SomeMessage quux = 4 [
    *     (buf.validate.field).cel = {/&#42; ... *&#47;}
    *   ];
    * }
    * ```
    */
  @SerialVersionUID(0L)
  case object IGNORE_UNSPECIFIED extends Ignore(0) with Ignore.Recognized {
    val index = 0
    val name = "IGNORE_UNSPECIFIED"
    override def isIgnoreUnspecified: _root_.scala.Boolean = true
  }
  
  /** Validation is skipped if the field is unpopulated. This rule is redundant
    * if the field is already nullable.
    *
    * ```proto
    * syntax="proto3
    *
    * message Request {
    *   // The uri rule applies only if the value is not the empty string.
    *   string foo = 1 [
    *     (buf.validate.field).string.uri = true,
    *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    *   ];
    *
    *   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    *   // case: the uri rule only applies if the field is set, including if
    *   // it's set to the empty string.
    *   optional string bar = 2 [
    *     (buf.validate.field).string.uri = true,
    *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    *   ];
    *
    *   // The min_items rule only applies if the list has at least one item.
    *   repeated string baz = 3 [
    *     (buf.validate.field).repeated.min_items = 3,
    *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    *   ];
    *
    *   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    *   // case: the custom CEL rule applies only if the field is set, including
    *   // if it's the "zero" value of that message.
    *   SomeMessage quux = 4 [
    *     (buf.validate.field).cel = {/&#42; ... *&#47;},
    *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    *   ];
    * }
    * ```
    */
  @SerialVersionUID(0L)
  case object IGNORE_IF_UNPOPULATED extends Ignore(1) with Ignore.Recognized {
    val index = 1
    val name = "IGNORE_IF_UNPOPULATED"
    override def isIgnoreIfUnpopulated: _root_.scala.Boolean = true
  }
  
  /** Validation is skipped if the field is unpopulated or if it is a nullable
    * field populated with its default value. This is typically the zero or
    * empty value, but proto2 scalars support custom defaults. For messages, the
    * default is a non-null message with all its fields unpopulated.
    *
    * ```proto
    * syntax="proto3
    *
    * message Request {
    *   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    *   // this case; the uri rule applies only if the value is not the empty
    *   // string.
    *   string foo = 1 [
    *     (buf.validate.field).string.uri = true,
    *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    *   ];
    *
    *   // The uri rule only applies if the field is set to a value other than
    *   // the empty string.
    *   optional string bar = 2 [
    *     (buf.validate.field).string.uri = true,
    *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    *   ];
    *
    *   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    *   // this case; the min_items rule only applies if the list has at least
    *   // one item.
    *   repeated string baz = 3 [
    *     (buf.validate.field).repeated.min_items = 3,
    *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    *   ];
    *
    *   // The custom CEL rule only applies if the field is set to a value other
    *   // than an empty message (i.e., fields are unpopulated).
    *   SomeMessage quux = 4 [
    *     (buf.validate.field).cel = {/&#42; ... *&#47;},
    *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    *   ];
    * }
    * ```
    *
    * This rule is affected by proto2 custom default values:
    *
    * ```proto
    * syntax="proto2";
    *
    * message Request {
    *   // The gt rule only applies if the field is set and it's value is not
    *   the default (i.e., not -42). The rule even applies if the field is set
    *   to zero since the default value differs.
    *   optional int32 value = 1 [
    *     default = -42,
    *     (buf.validate.field).int32.gt = 0,
    *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    *   ];
    * }
    */
  @SerialVersionUID(0L)
  case object IGNORE_IF_DEFAULT_VALUE extends Ignore(2) with Ignore.Recognized {
    val index = 2
    val name = "IGNORE_IF_DEFAULT_VALUE"
    override def isIgnoreIfDefaultValue: _root_.scala.Boolean = true
  }
  
  /** The validation rules of this field will be skipped and not evaluated. This
    * is useful for situations that necessitate turning off the rules of a field
    * containing a message that may not make sense in the current context, or to
    * temporarily disable rules during development.
    *
    * ```proto
    * message MyMessage {
    *   // The field's rules will always be ignored, including any validation's
    *   // on value's fields.
    *   MyOtherMessage value = 1 [
    *     (buf.validate.field).ignore = IGNORE_ALWAYS];
    * }
    * ```
    */
  @SerialVersionUID(0L)
  case object IGNORE_ALWAYS extends Ignore(3) with Ignore.Recognized {
    val index = 3
    val name = "IGNORE_ALWAYS"
    override def isIgnoreAlways: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Ignore(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(IGNORE_UNSPECIFIED, IGNORE_IF_UNPOPULATED, IGNORE_IF_DEFAULT_VALUE, IGNORE_ALWAYS)
  def fromValue(__value: _root_.scala.Int): Ignore = __value match {
    case 0 => IGNORE_UNSPECIFIED
    case 1 => IGNORE_IF_UNPOPULATED
    case 2 => IGNORE_IF_DEFAULT_VALUE
    case 3 => IGNORE_ALWAYS
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = ValidateProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = ValidateProto.scalaDescriptor.enums(0)
}