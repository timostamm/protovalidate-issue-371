// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** DoubleRules describes the rules applied to `double` values. These
  * rules may also be applied to the `google.protobuf.DoubleValue` Well-Known-Type.
  *
  * @param const
  *   `const` requires the field value to exactly match the specified value. If
  *   the field value doesn't match, an error message is generated.
  *  
  *   ```proto
  *   message MyDouble {
  *     // value must equal 42.0
  *     double value = 1 [(buf.validate.field).double.const = 42.0];
  *   }
  *   ```
  * @param in
  *   `in` requires the field value to be equal to one of the specified values.
  *   If the field value isn't one of the specified values, an error message is
  *   generated.
  *  
  *   ```proto
  *   message MyDouble {
  *     // value must be in list [1.0, 2.0, 3.0]
  *     double value = 1 [(buf.validate.field).double = { in: [1.0, 2.0, 3.0] }];
  *   }
  *   ```
  * @param notIn
  *   `not_in` requires the field value to not be equal to any of the specified
  *   values. If the field value is one of the specified values, an error
  *   message is generated.
  *  
  *   ```proto
  *   message MyDouble {
  *     // value must not be in list [1.0, 2.0, 3.0]
  *     double value = 1 [(buf.validate.field).double = { not_in: [1.0, 2.0, 3.0] }];
  *   }
  *   ```
  * @param finite
  *   `finite` requires the field value to be finite. If the field value is
  *   infinite or NaN, an error message is generated.
  * @param example
  *   `example` specifies values that the field may have. These values SHOULD
  *   conform to other rules. `example` values will not impact validation
  *   but may be used as helpful guidance on how to populate the given field.
  *  
  *   ```proto
  *   message MyDouble {
  *     double value = 1 [
  *       (buf.validate.field).double.example = 1.0,
  *       (buf.validate.field).double.example = inf
  *     ];
  *   }
  *   ```
  */
@SerialVersionUID(0L)
final case class DoubleRules(
    const: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
    lessThan: build.buf.validate.validate.DoubleRules.LessThan = build.buf.validate.validate.DoubleRules.LessThan.Empty,
    greaterThan: build.buf.validate.validate.DoubleRules.GreaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Empty,
    in: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    notIn: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    finite: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    example: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DoubleRules] with _root_.scalapb.ExtendableMessage[DoubleRules] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (const.isDefined) {
        val __value = const.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
      };
      if (lessThan.lt.isDefined) {
        val __value = lessThan.lt.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
      };
      if (lessThan.lte.isDefined) {
        val __value = lessThan.lte.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
      };
      if (greaterThan.gt.isDefined) {
        val __value = greaterThan.gt.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, __value)
      };
      if (greaterThan.gte.isDefined) {
        val __value = greaterThan.gte.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, __value)
      };
      __size += 9 * in.size
      __size += 9 * notIn.size
      if (finite.isDefined) {
        val __value = finite.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
      };
      __size += 9 * example.size
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      const.foreach { __v =>
        val __m = __v
        _output__.writeDouble(1, __m)
      };
      lessThan.lt.foreach { __v =>
        val __m = __v
        _output__.writeDouble(2, __m)
      };
      lessThan.lte.foreach { __v =>
        val __m = __v
        _output__.writeDouble(3, __m)
      };
      greaterThan.gt.foreach { __v =>
        val __m = __v
        _output__.writeDouble(4, __m)
      };
      greaterThan.gte.foreach { __v =>
        val __m = __v
        _output__.writeDouble(5, __m)
      };
      in.foreach { __v =>
        val __m = __v
        _output__.writeDouble(6, __m)
      };
      notIn.foreach { __v =>
        val __m = __v
        _output__.writeDouble(7, __m)
      };
      finite.foreach { __v =>
        val __m = __v
        _output__.writeBool(8, __m)
      };
      example.foreach { __v =>
        val __m = __v
        _output__.writeDouble(9, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getConst: _root_.scala.Double = const.getOrElse(0.0)
    def clearConst: DoubleRules = copy(const = _root_.scala.None)
    def withConst(__v: _root_.scala.Double): DoubleRules = copy(const = Option(__v))
    def getLt: _root_.scala.Double = lessThan.lt.getOrElse(0.0)
    def withLt(__v: _root_.scala.Double): DoubleRules = copy(lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lt(__v))
    def getLte: _root_.scala.Double = lessThan.lte.getOrElse(0.0)
    def withLte(__v: _root_.scala.Double): DoubleRules = copy(lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lte(__v))
    def getGt: _root_.scala.Double = greaterThan.gt.getOrElse(0.0)
    def withGt(__v: _root_.scala.Double): DoubleRules = copy(greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gt(__v))
    def getGte: _root_.scala.Double = greaterThan.gte.getOrElse(0.0)
    def withGte(__v: _root_.scala.Double): DoubleRules = copy(greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gte(__v))
    def clearIn = copy(in = _root_.scala.Seq.empty)
    def addIn(__vs: _root_.scala.Double *): DoubleRules = addAllIn(__vs)
    def addAllIn(__vs: Iterable[_root_.scala.Double]): DoubleRules = copy(in = in ++ __vs)
    def withIn(__v: _root_.scala.Seq[_root_.scala.Double]): DoubleRules = copy(in = __v)
    def clearNotIn = copy(notIn = _root_.scala.Seq.empty)
    def addNotIn(__vs: _root_.scala.Double *): DoubleRules = addAllNotIn(__vs)
    def addAllNotIn(__vs: Iterable[_root_.scala.Double]): DoubleRules = copy(notIn = notIn ++ __vs)
    def withNotIn(__v: _root_.scala.Seq[_root_.scala.Double]): DoubleRules = copy(notIn = __v)
    def getFinite: _root_.scala.Boolean = finite.getOrElse(false)
    def clearFinite: DoubleRules = copy(finite = _root_.scala.None)
    def withFinite(__v: _root_.scala.Boolean): DoubleRules = copy(finite = Option(__v))
    def clearExample = copy(example = _root_.scala.Seq.empty)
    def addExample(__vs: _root_.scala.Double *): DoubleRules = addAllExample(__vs)
    def addAllExample(__vs: Iterable[_root_.scala.Double]): DoubleRules = copy(example = example ++ __vs)
    def withExample(__v: _root_.scala.Seq[_root_.scala.Double]): DoubleRules = copy(example = __v)
    def clearLessThan: DoubleRules = copy(lessThan = build.buf.validate.validate.DoubleRules.LessThan.Empty)
    def withLessThan(__v: build.buf.validate.validate.DoubleRules.LessThan): DoubleRules = copy(lessThan = __v)
    def clearGreaterThan: DoubleRules = copy(greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Empty)
    def withGreaterThan(__v: build.buf.validate.validate.DoubleRules.GreaterThan): DoubleRules = copy(greaterThan = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => const.orNull
        case 2 => lessThan.lt.orNull
        case 3 => lessThan.lte.orNull
        case 4 => greaterThan.gt.orNull
        case 5 => greaterThan.gte.orNull
        case 6 => in
        case 7 => notIn
        case 8 => finite.orNull
        case 9 => example
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => const.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => lessThan.lt.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => lessThan.lte.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => greaterThan.gt.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => greaterThan.gte.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(in.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(notIn.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 8 => finite.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(example.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.DoubleRules.type = build.buf.validate.validate.DoubleRules
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.DoubleRules])
}

object DoubleRules extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.DoubleRules] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.DoubleRules] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.DoubleRules = {
    var __const: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
    val __in: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
    val __notIn: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
    var __finite: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    val __example: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
    var __lessThan: build.buf.validate.validate.DoubleRules.LessThan = build.buf.validate.validate.DoubleRules.LessThan.Empty
    var __greaterThan: build.buf.validate.validate.DoubleRules.GreaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 9 =>
          __const = _root_.scala.Option(_input__.readDouble())
        case 17 =>
          __lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lt(_input__.readDouble())
        case 25 =>
          __lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lte(_input__.readDouble())
        case 33 =>
          __greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gt(_input__.readDouble())
        case 41 =>
          __greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gte(_input__.readDouble())
        case 49 =>
          __in += _input__.readDouble()
        case 50 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __in += _input__.readDouble()
          }
          _input__.popLimit(oldLimit)
        }
        case 57 =>
          __notIn += _input__.readDouble()
        case 58 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __notIn += _input__.readDouble()
          }
          _input__.popLimit(oldLimit)
        }
        case 64 =>
          __finite = _root_.scala.Option(_input__.readBool())
        case 73 =>
          __example += _input__.readDouble()
        case 74 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __example += _input__.readDouble()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.DoubleRules(
        const = __const,
        in = __in.result(),
        notIn = __notIn.result(),
        finite = __finite,
        example = __example.result(),
        lessThan = __lessThan,
        greaterThan = __greaterThan,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.DoubleRules] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.DoubleRules(
        const = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
        in = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        notIn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        finite = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        example = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        lessThan = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(build.buf.validate.validate.DoubleRules.LessThan.Lt(_))
            .orElse[build.buf.validate.validate.DoubleRules.LessThan](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(build.buf.validate.validate.DoubleRules.LessThan.Lte(_)))
            .getOrElse(build.buf.validate.validate.DoubleRules.LessThan.Empty),
        greaterThan = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(build.buf.validate.validate.DoubleRules.GreaterThan.Gt(_))
            .orElse[build.buf.validate.validate.DoubleRules.GreaterThan](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(build.buf.validate.validate.DoubleRules.GreaterThan.Gte(_)))
            .getOrElse(build.buf.validate.validate.DoubleRules.GreaterThan.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.DoubleRules(
    const = _root_.scala.None,
    in = _root_.scala.Seq.empty,
    notIn = _root_.scala.Seq.empty,
    finite = _root_.scala.None,
    example = _root_.scala.Seq.empty,
    lessThan = build.buf.validate.validate.DoubleRules.LessThan.Empty,
    greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Empty
  )
  sealed trait LessThan extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isLt: _root_.scala.Boolean = false
    def isLte: _root_.scala.Boolean = false
    def lt: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
    def lte: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
  }
  object LessThan {
    @SerialVersionUID(0L)
    case object Empty extends build.buf.validate.validate.DoubleRules.LessThan {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Lt(value: _root_.scala.Double) extends build.buf.validate.validate.DoubleRules.LessThan {
      type ValueType = _root_.scala.Double
      override def isLt: _root_.scala.Boolean = true
      override def lt: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Lte(value: _root_.scala.Double) extends build.buf.validate.validate.DoubleRules.LessThan {
      type ValueType = _root_.scala.Double
      override def isLte: _root_.scala.Boolean = true
      override def lte: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  sealed trait GreaterThan extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isGt: _root_.scala.Boolean = false
    def isGte: _root_.scala.Boolean = false
    def gt: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
    def gte: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
  }
  object GreaterThan {
    @SerialVersionUID(0L)
    case object Empty extends build.buf.validate.validate.DoubleRules.GreaterThan {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Gt(value: _root_.scala.Double) extends build.buf.validate.validate.DoubleRules.GreaterThan {
      type ValueType = _root_.scala.Double
      override def isGt: _root_.scala.Boolean = true
      override def gt: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Gte(value: _root_.scala.Double) extends build.buf.validate.validate.DoubleRules.GreaterThan {
      type ValueType = _root_.scala.Double
      override def isGte: _root_.scala.Boolean = true
      override def gte: _root_.scala.Option[_root_.scala.Double] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  implicit class DoubleRulesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.DoubleRules]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.DoubleRules](_l) {
    def const: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getConst)((c_, f_) => c_.copy(const = _root_.scala.Option(f_)))
    def optionalConst: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.const)((c_, f_) => c_.copy(const = f_))
    def lt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getLt)((c_, f_) => c_.copy(lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lt(f_)))
    def lte: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getLte)((c_, f_) => c_.copy(lessThan = build.buf.validate.validate.DoubleRules.LessThan.Lte(f_)))
    def gt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getGt)((c_, f_) => c_.copy(greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gt(f_)))
    def gte: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getGte)((c_, f_) => c_.copy(greaterThan = build.buf.validate.validate.DoubleRules.GreaterThan.Gte(f_)))
    def in: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.in)((c_, f_) => c_.copy(in = f_))
    def notIn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.notIn)((c_, f_) => c_.copy(notIn = f_))
    def finite: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getFinite)((c_, f_) => c_.copy(finite = _root_.scala.Option(f_)))
    def optionalFinite: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.finite)((c_, f_) => c_.copy(finite = f_))
    def example: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.example)((c_, f_) => c_.copy(example = f_))
    def lessThan: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.DoubleRules.LessThan] = field(_.lessThan)((c_, f_) => c_.copy(lessThan = f_))
    def greaterThan: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.DoubleRules.GreaterThan] = field(_.greaterThan)((c_, f_) => c_.copy(greaterThan = f_))
  }
  final val CONST_FIELD_NUMBER = 1
  final val LT_FIELD_NUMBER = 2
  final val LTE_FIELD_NUMBER = 3
  final val GT_FIELD_NUMBER = 4
  final val GTE_FIELD_NUMBER = 5
  final val IN_FIELD_NUMBER = 6
  final val NOT_IN_FIELD_NUMBER = 7
  final val FINITE_FIELD_NUMBER = 8
  final val EXAMPLE_FIELD_NUMBER = 9
  def of(
    const: _root_.scala.Option[_root_.scala.Double],
    lessThan: build.buf.validate.validate.DoubleRules.LessThan,
    greaterThan: build.buf.validate.validate.DoubleRules.GreaterThan,
    in: _root_.scala.Seq[_root_.scala.Double],
    notIn: _root_.scala.Seq[_root_.scala.Double],
    finite: _root_.scala.Option[_root_.scala.Boolean],
    example: _root_.scala.Seq[_root_.scala.Double]
  ): _root_.build.buf.validate.validate.DoubleRules = _root_.build.buf.validate.validate.DoubleRules(
    const,
    lessThan,
    greaterThan,
    in,
    notIn,
    finite,
    example
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.DoubleRules])
}
