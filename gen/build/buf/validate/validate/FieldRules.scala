// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** FieldRules encapsulates the rules for each type of field. Depending on
  * the field, the correct set should be used to ensure proper validations.
  *
  * @param cel
  *   `cel` is a repeated field used to represent a textual expression
  *   in the Common Expression Language (CEL) syntax. For more information on
  *   CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
  *  
  *   ```proto
  *   message MyMessage {
  *     // The field `value` must be greater than 42.
  *     optional int32 value = 1 [(buf.validate.field).cel = {
  *       id: "my_message.value",
  *       message: "value must be greater than 42",
  *       expression: "this &gt; 42",
  *     }];
  *   }
  *   ```
  * @param required
  *   If `required` is true, the field must be populated. A populated field can be
  *   described as "serialized in the wire format," which includes:
  *  
  *   - the following "nullable" fields must be explicitly set to be considered populated:
  *     - singular message fields (whose fields may be unpopulated / default values)
  *     - member fields of a oneof (may be their default value)
  *     - proto3 optional fields (may be their default value)
  *     - proto2 scalar fields (both optional and required)
  *   - proto3 scalar fields must be non-zero to be considered populated
  *   - repeated and map fields must be non-empty to be considered populated
  *   - map keys/values and repeated items are always considered populated
  *  
  *   ```proto
  *   message MyMessage {
  *     // The field `value` must be set to a non-null value.
  *     optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
  *   }
  *   ```
  * @param ignore
  *   Skip validation on the field if its value matches the specified criteria.
  *   See Ignore enum for details.
  *  
  *   ```proto
  *   message UpdateRequest {
  *     // The uri rule only applies if the field is populated and not an empty
  *     // string.
  *     optional string url = 1 [
  *       (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
  *       (buf.validate.field).string.uri = true,
  *     ];
  *   }
  *   ```
  */
@SerialVersionUID(0L)
final case class FieldRules(
    cel: _root_.scala.Seq[build.buf.validate.validate.Rule] = _root_.scala.Seq.empty,
    required: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    ignore: _root_.scala.Option[build.buf.validate.validate.Ignore] = _root_.scala.None,
    `type`: build.buf.validate.validate.FieldRules.Type = build.buf.validate.validate.FieldRules.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FieldRules] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      cel.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (required.isDefined) {
        val __value = required.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(25, __value)
      };
      if (ignore.isDefined) {
        val __value = ignore.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(27, __value)
      };
      if (`type`.float.isDefined) {
        val __value = `type`.float.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.double.isDefined) {
        val __value = `type`.double.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.int32.isDefined) {
        val __value = `type`.int32.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.int64.isDefined) {
        val __value = `type`.int64.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.uint32.isDefined) {
        val __value = `type`.uint32.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.uint64.isDefined) {
        val __value = `type`.uint64.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sint32.isDefined) {
        val __value = `type`.sint32.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sint64.isDefined) {
        val __value = `type`.sint64.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.fixed32.isDefined) {
        val __value = `type`.fixed32.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.fixed64.isDefined) {
        val __value = `type`.fixed64.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sfixed32.isDefined) {
        val __value = `type`.sfixed32.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sfixed64.isDefined) {
        val __value = `type`.sfixed64.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.bool.isDefined) {
        val __value = `type`.bool.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.string.isDefined) {
        val __value = `type`.string.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.bytes.isDefined) {
        val __value = `type`.bytes.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.`enum`.isDefined) {
        val __value = `type`.`enum`.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.repeated.isDefined) {
        val __value = `type`.repeated.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.map.isDefined) {
        val __value = `type`.map.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.any.isDefined) {
        val __value = `type`.any.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.duration.isDefined) {
        val __value = `type`.duration.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.timestamp.isDefined) {
        val __value = `type`.timestamp.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.float.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.double.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.int32.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.int64.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.uint32.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.uint64.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sint32.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sint64.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.fixed32.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.fixed64.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sfixed32.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sfixed64.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.bool.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.string.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.bytes.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.`enum`.foreach { __v =>
        val __m = __v
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.repeated.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.map.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.any.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.duration.foreach { __v =>
        val __m = __v
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.timestamp.foreach { __v =>
        val __m = __v
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cel.foreach { __v =>
        val __m = __v
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      required.foreach { __v =>
        val __m = __v
        _output__.writeBool(25, __m)
      };
      ignore.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(27, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearCel = copy(cel = _root_.scala.Seq.empty)
    def addCel(__vs: build.buf.validate.validate.Rule *): FieldRules = addAllCel(__vs)
    def addAllCel(__vs: Iterable[build.buf.validate.validate.Rule]): FieldRules = copy(cel = cel ++ __vs)
    def withCel(__v: _root_.scala.Seq[build.buf.validate.validate.Rule]): FieldRules = copy(cel = __v)
    def getRequired: _root_.scala.Boolean = required.getOrElse(false)
    def clearRequired: FieldRules = copy(required = _root_.scala.None)
    def withRequired(__v: _root_.scala.Boolean): FieldRules = copy(required = Option(__v))
    def getIgnore: build.buf.validate.validate.Ignore = ignore.getOrElse(build.buf.validate.validate.Ignore.IGNORE_UNSPECIFIED)
    def clearIgnore: FieldRules = copy(ignore = _root_.scala.None)
    def withIgnore(__v: build.buf.validate.validate.Ignore): FieldRules = copy(ignore = Option(__v))
    def getFloat: build.buf.validate.validate.FloatRules = `type`.float.getOrElse(build.buf.validate.validate.FloatRules.defaultInstance)
    def withFloat(__v: build.buf.validate.validate.FloatRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Float(__v))
    def getDouble: build.buf.validate.validate.DoubleRules = `type`.double.getOrElse(build.buf.validate.validate.DoubleRules.defaultInstance)
    def withDouble(__v: build.buf.validate.validate.DoubleRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Double(__v))
    def getInt32: build.buf.validate.validate.Int32Rules = `type`.int32.getOrElse(build.buf.validate.validate.Int32Rules.defaultInstance)
    def withInt32(__v: build.buf.validate.validate.Int32Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Int32(__v))
    def getInt64: build.buf.validate.validate.Int64Rules = `type`.int64.getOrElse(build.buf.validate.validate.Int64Rules.defaultInstance)
    def withInt64(__v: build.buf.validate.validate.Int64Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Int64(__v))
    def getUint32: build.buf.validate.validate.UInt32Rules = `type`.uint32.getOrElse(build.buf.validate.validate.UInt32Rules.defaultInstance)
    def withUint32(__v: build.buf.validate.validate.UInt32Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Uint32(__v))
    def getUint64: build.buf.validate.validate.UInt64Rules = `type`.uint64.getOrElse(build.buf.validate.validate.UInt64Rules.defaultInstance)
    def withUint64(__v: build.buf.validate.validate.UInt64Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Uint64(__v))
    def getSint32: build.buf.validate.validate.SInt32Rules = `type`.sint32.getOrElse(build.buf.validate.validate.SInt32Rules.defaultInstance)
    def withSint32(__v: build.buf.validate.validate.SInt32Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Sint32(__v))
    def getSint64: build.buf.validate.validate.SInt64Rules = `type`.sint64.getOrElse(build.buf.validate.validate.SInt64Rules.defaultInstance)
    def withSint64(__v: build.buf.validate.validate.SInt64Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Sint64(__v))
    def getFixed32: build.buf.validate.validate.Fixed32Rules = `type`.fixed32.getOrElse(build.buf.validate.validate.Fixed32Rules.defaultInstance)
    def withFixed32(__v: build.buf.validate.validate.Fixed32Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Fixed32(__v))
    def getFixed64: build.buf.validate.validate.Fixed64Rules = `type`.fixed64.getOrElse(build.buf.validate.validate.Fixed64Rules.defaultInstance)
    def withFixed64(__v: build.buf.validate.validate.Fixed64Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Fixed64(__v))
    def getSfixed32: build.buf.validate.validate.SFixed32Rules = `type`.sfixed32.getOrElse(build.buf.validate.validate.SFixed32Rules.defaultInstance)
    def withSfixed32(__v: build.buf.validate.validate.SFixed32Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Sfixed32(__v))
    def getSfixed64: build.buf.validate.validate.SFixed64Rules = `type`.sfixed64.getOrElse(build.buf.validate.validate.SFixed64Rules.defaultInstance)
    def withSfixed64(__v: build.buf.validate.validate.SFixed64Rules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Sfixed64(__v))
    def getBool: build.buf.validate.validate.BoolRules = `type`.bool.getOrElse(build.buf.validate.validate.BoolRules.defaultInstance)
    def withBool(__v: build.buf.validate.validate.BoolRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Bool(__v))
    def getString: build.buf.validate.validate.StringRules = `type`.string.getOrElse(build.buf.validate.validate.StringRules.defaultInstance)
    def withString(__v: build.buf.validate.validate.StringRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.String(__v))
    def getBytes: build.buf.validate.validate.BytesRules = `type`.bytes.getOrElse(build.buf.validate.validate.BytesRules.defaultInstance)
    def withBytes(__v: build.buf.validate.validate.BytesRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Bytes(__v))
    def getEnum: build.buf.validate.validate.EnumRules = `type`.`enum`.getOrElse(build.buf.validate.validate.EnumRules.defaultInstance)
    def withEnum(__v: build.buf.validate.validate.EnumRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Enum(__v))
    def getRepeated: build.buf.validate.validate.RepeatedRules = `type`.repeated.getOrElse(build.buf.validate.validate.RepeatedRules.defaultInstance)
    def withRepeated(__v: build.buf.validate.validate.RepeatedRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Repeated(__v))
    def getMap: build.buf.validate.validate.MapRules = `type`.map.getOrElse(build.buf.validate.validate.MapRules.defaultInstance)
    def withMap(__v: build.buf.validate.validate.MapRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Map(__v))
    def getAny: build.buf.validate.validate.AnyRules = `type`.any.getOrElse(build.buf.validate.validate.AnyRules.defaultInstance)
    def withAny(__v: build.buf.validate.validate.AnyRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Any(__v))
    def getDuration: build.buf.validate.validate.DurationRules = `type`.duration.getOrElse(build.buf.validate.validate.DurationRules.defaultInstance)
    def withDuration(__v: build.buf.validate.validate.DurationRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Duration(__v))
    def getTimestamp: build.buf.validate.validate.TimestampRules = `type`.timestamp.getOrElse(build.buf.validate.validate.TimestampRules.defaultInstance)
    def withTimestamp(__v: build.buf.validate.validate.TimestampRules): FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Timestamp(__v))
    def clearType: FieldRules = copy(`type` = build.buf.validate.validate.FieldRules.Type.Empty)
    def withType(__v: build.buf.validate.validate.FieldRules.Type): FieldRules = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 23 => cel
        case 25 => required.orNull
        case 27 => ignore.map(_.javaValueDescriptor).orNull
        case 1 => `type`.float.orNull
        case 2 => `type`.double.orNull
        case 3 => `type`.int32.orNull
        case 4 => `type`.int64.orNull
        case 5 => `type`.uint32.orNull
        case 6 => `type`.uint64.orNull
        case 7 => `type`.sint32.orNull
        case 8 => `type`.sint64.orNull
        case 9 => `type`.fixed32.orNull
        case 10 => `type`.fixed64.orNull
        case 11 => `type`.sfixed32.orNull
        case 12 => `type`.sfixed64.orNull
        case 13 => `type`.bool.orNull
        case 14 => `type`.string.orNull
        case 15 => `type`.bytes.orNull
        case 16 => `type`.`enum`.orNull
        case 18 => `type`.repeated.orNull
        case 19 => `type`.map.orNull
        case 20 => `type`.any.orNull
        case 21 => `type`.duration.orNull
        case 22 => `type`.timestamp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 23 => _root_.scalapb.descriptors.PRepeated(cel.iterator.map(_.toPMessage).toVector)
        case 25 => required.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 27 => ignore.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 1 => `type`.float.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `type`.double.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => `type`.int32.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => `type`.int64.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `type`.uint32.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.uint64.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => `type`.sint32.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => `type`.sint64.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => `type`.fixed32.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => `type`.fixed64.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => `type`.sfixed32.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => `type`.sfixed64.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => `type`.bool.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => `type`.string.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => `type`.bytes.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => `type`.`enum`.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => `type`.repeated.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => `type`.map.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => `type`.any.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => `type`.duration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => `type`.timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.FieldRules.type = build.buf.validate.validate.FieldRules
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.FieldRules])
}

object FieldRules extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.FieldRules] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.FieldRules] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.FieldRules = {
    val __cel: _root_.scala.collection.immutable.VectorBuilder[build.buf.validate.validate.Rule] = new _root_.scala.collection.immutable.VectorBuilder[build.buf.validate.validate.Rule]
    var __required: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __ignore: _root_.scala.Option[build.buf.validate.validate.Ignore] = _root_.scala.None
    var __type: build.buf.validate.validate.FieldRules.Type = build.buf.validate.validate.FieldRules.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 186 =>
          __cel += _root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.Rule](_input__)
        case 200 =>
          __required = _root_.scala.Option(_input__.readBool())
        case 216 =>
          __ignore = _root_.scala.Option(build.buf.validate.validate.Ignore.fromValue(_input__.readEnum()))
        case 10 =>
          __type = build.buf.validate.validate.FieldRules.Type.Float(__type.float.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FloatRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __type = build.buf.validate.validate.FieldRules.Type.Double(__type.double.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.DoubleRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __type = build.buf.validate.validate.FieldRules.Type.Int32(__type.int32.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.Int32Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __type = build.buf.validate.validate.FieldRules.Type.Int64(__type.int64.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.Int64Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __type = build.buf.validate.validate.FieldRules.Type.Uint32(__type.uint32.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.UInt32Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __type = build.buf.validate.validate.FieldRules.Type.Uint64(__type.uint64.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.UInt64Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __type = build.buf.validate.validate.FieldRules.Type.Sint32(__type.sint32.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.SInt32Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __type = build.buf.validate.validate.FieldRules.Type.Sint64(__type.sint64.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.SInt64Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __type = build.buf.validate.validate.FieldRules.Type.Fixed32(__type.fixed32.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.Fixed32Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __type = build.buf.validate.validate.FieldRules.Type.Fixed64(__type.fixed64.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.Fixed64Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __type = build.buf.validate.validate.FieldRules.Type.Sfixed32(__type.sfixed32.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.SFixed32Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __type = build.buf.validate.validate.FieldRules.Type.Sfixed64(__type.sfixed64.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.SFixed64Rules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __type = build.buf.validate.validate.FieldRules.Type.Bool(__type.bool.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.BoolRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __type = build.buf.validate.validate.FieldRules.Type.String(__type.string.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.StringRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 122 =>
          __type = build.buf.validate.validate.FieldRules.Type.Bytes(__type.bytes.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.BytesRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 130 =>
          __type = build.buf.validate.validate.FieldRules.Type.Enum(__type.`enum`.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.EnumRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 146 =>
          __type = build.buf.validate.validate.FieldRules.Type.Repeated(__type.repeated.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.RepeatedRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 154 =>
          __type = build.buf.validate.validate.FieldRules.Type.Map(__type.map.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.MapRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 162 =>
          __type = build.buf.validate.validate.FieldRules.Type.Any(__type.any.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.AnyRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 170 =>
          __type = build.buf.validate.validate.FieldRules.Type.Duration(__type.duration.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.DurationRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 178 =>
          __type = build.buf.validate.validate.FieldRules.Type.Timestamp(__type.timestamp.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.TimestampRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.FieldRules(
        cel = __cel.result(),
        required = __required,
        ignore = __ignore,
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.FieldRules] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.FieldRules(
        cel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).map(_.as[_root_.scala.Seq[build.buf.validate.validate.Rule]]).getOrElse(_root_.scala.Seq.empty),
        required = __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        ignore = __fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => build.buf.validate.validate.Ignore.fromValue(__e.number)),
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FloatRules]]).map(build.buf.validate.validate.FieldRules.Type.Float(_))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.DoubleRules]]).map(build.buf.validate.validate.FieldRules.Type.Double(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.Int32Rules]]).map(build.buf.validate.validate.FieldRules.Type.Int32(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.Int64Rules]]).map(build.buf.validate.validate.FieldRules.Type.Int64(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.UInt32Rules]]).map(build.buf.validate.validate.FieldRules.Type.Uint32(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.UInt64Rules]]).map(build.buf.validate.validate.FieldRules.Type.Uint64(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.SInt32Rules]]).map(build.buf.validate.validate.FieldRules.Type.Sint32(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.SInt64Rules]]).map(build.buf.validate.validate.FieldRules.Type.Sint64(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.Fixed32Rules]]).map(build.buf.validate.validate.FieldRules.Type.Fixed32(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.Fixed64Rules]]).map(build.buf.validate.validate.FieldRules.Type.Fixed64(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.SFixed32Rules]]).map(build.buf.validate.validate.FieldRules.Type.Sfixed32(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.SFixed64Rules]]).map(build.buf.validate.validate.FieldRules.Type.Sfixed64(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.BoolRules]]).map(build.buf.validate.validate.FieldRules.Type.Bool(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.StringRules]]).map(build.buf.validate.validate.FieldRules.Type.String(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.BytesRules]]).map(build.buf.validate.validate.FieldRules.Type.Bytes(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.EnumRules]]).map(build.buf.validate.validate.FieldRules.Type.Enum(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.RepeatedRules]]).map(build.buf.validate.validate.FieldRules.Type.Repeated(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.MapRules]]).map(build.buf.validate.validate.FieldRules.Type.Map(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.AnyRules]]).map(build.buf.validate.validate.FieldRules.Type.Any(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.DurationRules]]).map(build.buf.validate.validate.FieldRules.Type.Duration(_)))
            .orElse[build.buf.validate.validate.FieldRules.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.TimestampRules]]).map(build.buf.validate.validate.FieldRules.Type.Timestamp(_)))
            .getOrElse(build.buf.validate.validate.FieldRules.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 23 => __out = build.buf.validate.validate.Rule
      case 1 => __out = build.buf.validate.validate.FloatRules
      case 2 => __out = build.buf.validate.validate.DoubleRules
      case 3 => __out = build.buf.validate.validate.Int32Rules
      case 4 => __out = build.buf.validate.validate.Int64Rules
      case 5 => __out = build.buf.validate.validate.UInt32Rules
      case 6 => __out = build.buf.validate.validate.UInt64Rules
      case 7 => __out = build.buf.validate.validate.SInt32Rules
      case 8 => __out = build.buf.validate.validate.SInt64Rules
      case 9 => __out = build.buf.validate.validate.Fixed32Rules
      case 10 => __out = build.buf.validate.validate.Fixed64Rules
      case 11 => __out = build.buf.validate.validate.SFixed32Rules
      case 12 => __out = build.buf.validate.validate.SFixed64Rules
      case 13 => __out = build.buf.validate.validate.BoolRules
      case 14 => __out = build.buf.validate.validate.StringRules
      case 15 => __out = build.buf.validate.validate.BytesRules
      case 16 => __out = build.buf.validate.validate.EnumRules
      case 18 => __out = build.buf.validate.validate.RepeatedRules
      case 19 => __out = build.buf.validate.validate.MapRules
      case 20 => __out = build.buf.validate.validate.AnyRules
      case 21 => __out = build.buf.validate.validate.DurationRules
      case 22 => __out = build.buf.validate.validate.TimestampRules
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 27 => build.buf.validate.validate.Ignore
    }
  }
  lazy val defaultInstance = build.buf.validate.validate.FieldRules(
    cel = _root_.scala.Seq.empty,
    required = _root_.scala.None,
    ignore = _root_.scala.None,
    `type` = build.buf.validate.validate.FieldRules.Type.Empty
  )
  sealed trait Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isFloat: _root_.scala.Boolean = false
    def isDouble: _root_.scala.Boolean = false
    def isInt32: _root_.scala.Boolean = false
    def isInt64: _root_.scala.Boolean = false
    def isUint32: _root_.scala.Boolean = false
    def isUint64: _root_.scala.Boolean = false
    def isSint32: _root_.scala.Boolean = false
    def isSint64: _root_.scala.Boolean = false
    def isFixed32: _root_.scala.Boolean = false
    def isFixed64: _root_.scala.Boolean = false
    def isSfixed32: _root_.scala.Boolean = false
    def isSfixed64: _root_.scala.Boolean = false
    def isBool: _root_.scala.Boolean = false
    def isString: _root_.scala.Boolean = false
    def isBytes: _root_.scala.Boolean = false
    def isEnum: _root_.scala.Boolean = false
    def isRepeated: _root_.scala.Boolean = false
    def isMap: _root_.scala.Boolean = false
    def isAny: _root_.scala.Boolean = false
    def isDuration: _root_.scala.Boolean = false
    def isTimestamp: _root_.scala.Boolean = false
    def float: _root_.scala.Option[build.buf.validate.validate.FloatRules] = _root_.scala.None
    def double: _root_.scala.Option[build.buf.validate.validate.DoubleRules] = _root_.scala.None
    def int32: _root_.scala.Option[build.buf.validate.validate.Int32Rules] = _root_.scala.None
    def int64: _root_.scala.Option[build.buf.validate.validate.Int64Rules] = _root_.scala.None
    def uint32: _root_.scala.Option[build.buf.validate.validate.UInt32Rules] = _root_.scala.None
    def uint64: _root_.scala.Option[build.buf.validate.validate.UInt64Rules] = _root_.scala.None
    def sint32: _root_.scala.Option[build.buf.validate.validate.SInt32Rules] = _root_.scala.None
    def sint64: _root_.scala.Option[build.buf.validate.validate.SInt64Rules] = _root_.scala.None
    def fixed32: _root_.scala.Option[build.buf.validate.validate.Fixed32Rules] = _root_.scala.None
    def fixed64: _root_.scala.Option[build.buf.validate.validate.Fixed64Rules] = _root_.scala.None
    def sfixed32: _root_.scala.Option[build.buf.validate.validate.SFixed32Rules] = _root_.scala.None
    def sfixed64: _root_.scala.Option[build.buf.validate.validate.SFixed64Rules] = _root_.scala.None
    def bool: _root_.scala.Option[build.buf.validate.validate.BoolRules] = _root_.scala.None
    def string: _root_.scala.Option[build.buf.validate.validate.StringRules] = _root_.scala.None
    def bytes: _root_.scala.Option[build.buf.validate.validate.BytesRules] = _root_.scala.None
    def `enum`: _root_.scala.Option[build.buf.validate.validate.EnumRules] = _root_.scala.None
    def repeated: _root_.scala.Option[build.buf.validate.validate.RepeatedRules] = _root_.scala.None
    def map: _root_.scala.Option[build.buf.validate.validate.MapRules] = _root_.scala.None
    def any: _root_.scala.Option[build.buf.validate.validate.AnyRules] = _root_.scala.None
    def duration: _root_.scala.Option[build.buf.validate.validate.DurationRules] = _root_.scala.None
    def timestamp: _root_.scala.Option[build.buf.validate.validate.TimestampRules] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Float(value: build.buf.validate.validate.FloatRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.FloatRules
      override def isFloat: _root_.scala.Boolean = true
      override def float: _root_.scala.Option[build.buf.validate.validate.FloatRules] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Double(value: build.buf.validate.validate.DoubleRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.DoubleRules
      override def isDouble: _root_.scala.Boolean = true
      override def double: _root_.scala.Option[build.buf.validate.validate.DoubleRules] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Int32(value: build.buf.validate.validate.Int32Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.Int32Rules
      override def isInt32: _root_.scala.Boolean = true
      override def int32: _root_.scala.Option[build.buf.validate.validate.Int32Rules] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Int64(value: build.buf.validate.validate.Int64Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.Int64Rules
      override def isInt64: _root_.scala.Boolean = true
      override def int64: _root_.scala.Option[build.buf.validate.validate.Int64Rules] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Uint32(value: build.buf.validate.validate.UInt32Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.UInt32Rules
      override def isUint32: _root_.scala.Boolean = true
      override def uint32: _root_.scala.Option[build.buf.validate.validate.UInt32Rules] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Uint64(value: build.buf.validate.validate.UInt64Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.UInt64Rules
      override def isUint64: _root_.scala.Boolean = true
      override def uint64: _root_.scala.Option[build.buf.validate.validate.UInt64Rules] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Sint32(value: build.buf.validate.validate.SInt32Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.SInt32Rules
      override def isSint32: _root_.scala.Boolean = true
      override def sint32: _root_.scala.Option[build.buf.validate.validate.SInt32Rules] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Sint64(value: build.buf.validate.validate.SInt64Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.SInt64Rules
      override def isSint64: _root_.scala.Boolean = true
      override def sint64: _root_.scala.Option[build.buf.validate.validate.SInt64Rules] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Fixed32(value: build.buf.validate.validate.Fixed32Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.Fixed32Rules
      override def isFixed32: _root_.scala.Boolean = true
      override def fixed32: _root_.scala.Option[build.buf.validate.validate.Fixed32Rules] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class Fixed64(value: build.buf.validate.validate.Fixed64Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.Fixed64Rules
      override def isFixed64: _root_.scala.Boolean = true
      override def fixed64: _root_.scala.Option[build.buf.validate.validate.Fixed64Rules] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class Sfixed32(value: build.buf.validate.validate.SFixed32Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.SFixed32Rules
      override def isSfixed32: _root_.scala.Boolean = true
      override def sfixed32: _root_.scala.Option[build.buf.validate.validate.SFixed32Rules] = Some(value)
      override def number: _root_.scala.Int = 11
    }
    @SerialVersionUID(0L)
    final case class Sfixed64(value: build.buf.validate.validate.SFixed64Rules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.SFixed64Rules
      override def isSfixed64: _root_.scala.Boolean = true
      override def sfixed64: _root_.scala.Option[build.buf.validate.validate.SFixed64Rules] = Some(value)
      override def number: _root_.scala.Int = 12
    }
    @SerialVersionUID(0L)
    final case class Bool(value: build.buf.validate.validate.BoolRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.BoolRules
      override def isBool: _root_.scala.Boolean = true
      override def bool: _root_.scala.Option[build.buf.validate.validate.BoolRules] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class String(value: build.buf.validate.validate.StringRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.StringRules
      override def isString: _root_.scala.Boolean = true
      override def string: _root_.scala.Option[build.buf.validate.validate.StringRules] = Some(value)
      override def number: _root_.scala.Int = 14
    }
    @SerialVersionUID(0L)
    final case class Bytes(value: build.buf.validate.validate.BytesRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.BytesRules
      override def isBytes: _root_.scala.Boolean = true
      override def bytes: _root_.scala.Option[build.buf.validate.validate.BytesRules] = Some(value)
      override def number: _root_.scala.Int = 15
    }
    @SerialVersionUID(0L)
    final case class Enum(value: build.buf.validate.validate.EnumRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.EnumRules
      override def isEnum: _root_.scala.Boolean = true
      override def `enum`: _root_.scala.Option[build.buf.validate.validate.EnumRules] = Some(value)
      override def number: _root_.scala.Int = 16
    }
    @SerialVersionUID(0L)
    final case class Repeated(value: build.buf.validate.validate.RepeatedRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.RepeatedRules
      override def isRepeated: _root_.scala.Boolean = true
      override def repeated: _root_.scala.Option[build.buf.validate.validate.RepeatedRules] = Some(value)
      override def number: _root_.scala.Int = 18
    }
    @SerialVersionUID(0L)
    final case class Map(value: build.buf.validate.validate.MapRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.MapRules
      override def isMap: _root_.scala.Boolean = true
      override def map: _root_.scala.Option[build.buf.validate.validate.MapRules] = Some(value)
      override def number: _root_.scala.Int = 19
    }
    @SerialVersionUID(0L)
    final case class Any(value: build.buf.validate.validate.AnyRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.AnyRules
      override def isAny: _root_.scala.Boolean = true
      override def any: _root_.scala.Option[build.buf.validate.validate.AnyRules] = Some(value)
      override def number: _root_.scala.Int = 20
    }
    @SerialVersionUID(0L)
    final case class Duration(value: build.buf.validate.validate.DurationRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.DurationRules
      override def isDuration: _root_.scala.Boolean = true
      override def duration: _root_.scala.Option[build.buf.validate.validate.DurationRules] = Some(value)
      override def number: _root_.scala.Int = 21
    }
    @SerialVersionUID(0L)
    final case class Timestamp(value: build.buf.validate.validate.TimestampRules) extends build.buf.validate.validate.FieldRules.Type {
      type ValueType = build.buf.validate.validate.TimestampRules
      override def isTimestamp: _root_.scala.Boolean = true
      override def timestamp: _root_.scala.Option[build.buf.validate.validate.TimestampRules] = Some(value)
      override def number: _root_.scala.Int = 22
    }
  }
  implicit class FieldRulesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldRules]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.FieldRules](_l) {
    def cel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[build.buf.validate.validate.Rule]] = field(_.cel)((c_, f_) => c_.copy(cel = f_))
    def required: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getRequired)((c_, f_) => c_.copy(required = _root_.scala.Option(f_)))
    def optionalRequired: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.required)((c_, f_) => c_.copy(required = f_))
    def ignore: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Ignore] = field(_.getIgnore)((c_, f_) => c_.copy(ignore = _root_.scala.Option(f_)))
    def optionalIgnore: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.Ignore]] = field(_.ignore)((c_, f_) => c_.copy(ignore = f_))
    def float: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FloatRules] = field(_.getFloat)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Float(f_)))
    def double: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.DoubleRules] = field(_.getDouble)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Double(f_)))
    def int32: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Int32Rules] = field(_.getInt32)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Int32(f_)))
    def int64: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Int64Rules] = field(_.getInt64)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Int64(f_)))
    def uint32: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.UInt32Rules] = field(_.getUint32)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Uint32(f_)))
    def uint64: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.UInt64Rules] = field(_.getUint64)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Uint64(f_)))
    def sint32: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.SInt32Rules] = field(_.getSint32)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Sint32(f_)))
    def sint64: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.SInt64Rules] = field(_.getSint64)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Sint64(f_)))
    def fixed32: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Fixed32Rules] = field(_.getFixed32)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Fixed32(f_)))
    def fixed64: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Fixed64Rules] = field(_.getFixed64)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Fixed64(f_)))
    def sfixed32: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.SFixed32Rules] = field(_.getSfixed32)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Sfixed32(f_)))
    def sfixed64: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.SFixed64Rules] = field(_.getSfixed64)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Sfixed64(f_)))
    def bool: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.BoolRules] = field(_.getBool)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Bool(f_)))
    def string: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.StringRules] = field(_.getString)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.String(f_)))
    def bytes: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.BytesRules] = field(_.getBytes)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Bytes(f_)))
    def `enum`: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.EnumRules] = field(_.getEnum)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Enum(f_)))
    def repeated: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.RepeatedRules] = field(_.getRepeated)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Repeated(f_)))
    def map: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.MapRules] = field(_.getMap)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Map(f_)))
    def any: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.AnyRules] = field(_.getAny)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Any(f_)))
    def duration: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.DurationRules] = field(_.getDuration)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Duration(f_)))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.TimestampRules] = field(_.getTimestamp)((c_, f_) => c_.copy(`type` = build.buf.validate.validate.FieldRules.Type.Timestamp(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldRules.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val CEL_FIELD_NUMBER = 23
  final val REQUIRED_FIELD_NUMBER = 25
  final val IGNORE_FIELD_NUMBER = 27
  final val FLOAT_FIELD_NUMBER = 1
  final val DOUBLE_FIELD_NUMBER = 2
  final val INT32_FIELD_NUMBER = 3
  final val INT64_FIELD_NUMBER = 4
  final val UINT32_FIELD_NUMBER = 5
  final val UINT64_FIELD_NUMBER = 6
  final val SINT32_FIELD_NUMBER = 7
  final val SINT64_FIELD_NUMBER = 8
  final val FIXED32_FIELD_NUMBER = 9
  final val FIXED64_FIELD_NUMBER = 10
  final val SFIXED32_FIELD_NUMBER = 11
  final val SFIXED64_FIELD_NUMBER = 12
  final val BOOL_FIELD_NUMBER = 13
  final val STRING_FIELD_NUMBER = 14
  final val BYTES_FIELD_NUMBER = 15
  final val ENUM_FIELD_NUMBER = 16
  final val REPEATED_FIELD_NUMBER = 18
  final val MAP_FIELD_NUMBER = 19
  final val ANY_FIELD_NUMBER = 20
  final val DURATION_FIELD_NUMBER = 21
  final val TIMESTAMP_FIELD_NUMBER = 22
  def of(
    cel: _root_.scala.Seq[build.buf.validate.validate.Rule],
    required: _root_.scala.Option[_root_.scala.Boolean],
    ignore: _root_.scala.Option[build.buf.validate.validate.Ignore],
    `type`: build.buf.validate.validate.FieldRules.Type
  ): _root_.build.buf.validate.validate.FieldRules = _root_.build.buf.validate.validate.FieldRules(
    cel,
    required,
    ignore,
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.FieldRules])
}
