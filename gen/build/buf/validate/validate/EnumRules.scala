// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** EnumRules describe the rules applied to `enum` values.
  *
  * @param const
  *   `const` requires the field value to exactly match the specified enum value.
  *   If the field value doesn't match, an error message is generated.
  *  
  *   ```proto
  *   enum MyEnum {
  *     MY_ENUM_UNSPECIFIED = 0;
  *     MY_ENUM_VALUE1 = 1;
  *     MY_ENUM_VALUE2 = 2;
  *   }
  *  
  *   message MyMessage {
  *     // The field `value` must be exactly MY_ENUM_VALUE1.
  *     MyEnum value = 1 [(buf.validate.field).enum.const = 1];
  *   }
  *   ```
  * @param definedOnly
  *   `defined_only` requires the field value to be one of the defined values for
  *   this enum, failing on any undefined value.
  *  
  *   ```proto
  *   enum MyEnum {
  *     MY_ENUM_UNSPECIFIED = 0;
  *     MY_ENUM_VALUE1 = 1;
  *     MY_ENUM_VALUE2 = 2;
  *   }
  *  
  *   message MyMessage {
  *     // The field `value` must be a defined value of MyEnum.
  *     MyEnum value = 1 [(buf.validate.field).enum.defined_only = true];
  *   }
  *   ```
  * @param in
  *   `in` requires the field value to be equal to one of the
  *  specified enum values. If the field value doesn't match any of the
  *  specified values, an error message is generated.
  *  
  *   ```proto
  *   enum MyEnum {
  *     MY_ENUM_UNSPECIFIED = 0;
  *     MY_ENUM_VALUE1 = 1;
  *     MY_ENUM_VALUE2 = 2;
  *   }
  *  
  *   message MyMessage {
  *     // The field `value` must be equal to one of the specified values.
  *     MyEnum value = 1 [(buf.validate.field).enum = { in: [1, 2]}];
  *   }
  *   ```
  * @param notIn
  *   `not_in` requires the field value to be not equal to any of the
  *  specified enum values. If the field value matches one of the specified
  *   values, an error message is generated.
  *  
  *   ```proto
  *   enum MyEnum {
  *     MY_ENUM_UNSPECIFIED = 0;
  *     MY_ENUM_VALUE1 = 1;
  *     MY_ENUM_VALUE2 = 2;
  *   }
  *  
  *   message MyMessage {
  *     // The field `value` must not be equal to any of the specified values.
  *     MyEnum value = 1 [(buf.validate.field).enum = { not_in: [1, 2]}];
  *   }
  *   ```
  * @param example
  *   `example` specifies values that the field may have. These values SHOULD
  *   conform to other rules. `example` values will not impact validation
  *   but may be used as helpful guidance on how to populate the given field.
  *  
  *   ```proto
  *   enum MyEnum {
  *     MY_ENUM_UNSPECIFIED = 0;
  *     MY_ENUM_VALUE1 = 1;
  *     MY_ENUM_VALUE2 = 2;
  *   }
  *  
  *   message MyMessage {
  *       (buf.validate.field).enum.example = 1,
  *       (buf.validate.field).enum.example = 2
  *   }
  *   ```
  */
@SerialVersionUID(0L)
final case class EnumRules(
    const: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    definedOnly: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    in: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    notIn: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    example: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EnumRules] with _root_.scalapb.ExtendableMessage[EnumRules] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (const.isDefined) {
        val __value = const.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      };
      if (definedOnly.isDefined) {
        val __value = definedOnly.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
      };
      in.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      }
      notIn.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      }
      example.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      const.foreach { __v =>
        val __m = __v
        _output__.writeInt32(1, __m)
      };
      definedOnly.foreach { __v =>
        val __m = __v
        _output__.writeBool(2, __m)
      };
      in.foreach { __v =>
        val __m = __v
        _output__.writeInt32(3, __m)
      };
      notIn.foreach { __v =>
        val __m = __v
        _output__.writeInt32(4, __m)
      };
      example.foreach { __v =>
        val __m = __v
        _output__.writeInt32(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getConst: _root_.scala.Int = const.getOrElse(0)
    def clearConst: EnumRules = copy(const = _root_.scala.None)
    def withConst(__v: _root_.scala.Int): EnumRules = copy(const = Option(__v))
    def getDefinedOnly: _root_.scala.Boolean = definedOnly.getOrElse(false)
    def clearDefinedOnly: EnumRules = copy(definedOnly = _root_.scala.None)
    def withDefinedOnly(__v: _root_.scala.Boolean): EnumRules = copy(definedOnly = Option(__v))
    def clearIn = copy(in = _root_.scala.Seq.empty)
    def addIn(__vs: _root_.scala.Int *): EnumRules = addAllIn(__vs)
    def addAllIn(__vs: Iterable[_root_.scala.Int]): EnumRules = copy(in = in ++ __vs)
    def withIn(__v: _root_.scala.Seq[_root_.scala.Int]): EnumRules = copy(in = __v)
    def clearNotIn = copy(notIn = _root_.scala.Seq.empty)
    def addNotIn(__vs: _root_.scala.Int *): EnumRules = addAllNotIn(__vs)
    def addAllNotIn(__vs: Iterable[_root_.scala.Int]): EnumRules = copy(notIn = notIn ++ __vs)
    def withNotIn(__v: _root_.scala.Seq[_root_.scala.Int]): EnumRules = copy(notIn = __v)
    def clearExample = copy(example = _root_.scala.Seq.empty)
    def addExample(__vs: _root_.scala.Int *): EnumRules = addAllExample(__vs)
    def addAllExample(__vs: Iterable[_root_.scala.Int]): EnumRules = copy(example = example ++ __vs)
    def withExample(__v: _root_.scala.Seq[_root_.scala.Int]): EnumRules = copy(example = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => const.orNull
        case 2 => definedOnly.orNull
        case 3 => in
        case 4 => notIn
        case 5 => example
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => const.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => definedOnly.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(in.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(notIn.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(example.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.EnumRules.type = build.buf.validate.validate.EnumRules
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.EnumRules])
}

object EnumRules extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.EnumRules] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.EnumRules] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.EnumRules = {
    var __const: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __definedOnly: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    val __in: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __notIn: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __example: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __const = _root_.scala.Option(_input__.readInt32())
        case 16 =>
          __definedOnly = _root_.scala.Option(_input__.readBool())
        case 24 =>
          __in += _input__.readInt32()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __in += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 32 =>
          __notIn += _input__.readInt32()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __notIn += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 40 =>
          __example += _input__.readInt32()
        case 42 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __example += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.EnumRules(
        const = __const,
        definedOnly = __definedOnly,
        in = __in.result(),
        notIn = __notIn.result(),
        example = __example.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.EnumRules] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.EnumRules(
        const = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        definedOnly = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        in = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        notIn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        example = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.EnumRules(
    const = _root_.scala.None,
    definedOnly = _root_.scala.None,
    in = _root_.scala.Seq.empty,
    notIn = _root_.scala.Seq.empty,
    example = _root_.scala.Seq.empty
  )
  implicit class EnumRulesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.EnumRules]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.EnumRules](_l) {
    def const: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getConst)((c_, f_) => c_.copy(const = _root_.scala.Option(f_)))
    def optionalConst: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.const)((c_, f_) => c_.copy(const = f_))
    def definedOnly: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getDefinedOnly)((c_, f_) => c_.copy(definedOnly = _root_.scala.Option(f_)))
    def optionalDefinedOnly: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.definedOnly)((c_, f_) => c_.copy(definedOnly = f_))
    def in: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.in)((c_, f_) => c_.copy(in = f_))
    def notIn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.notIn)((c_, f_) => c_.copy(notIn = f_))
    def example: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.example)((c_, f_) => c_.copy(example = f_))
  }
  final val CONST_FIELD_NUMBER = 1
  final val DEFINED_ONLY_FIELD_NUMBER = 2
  final val IN_FIELD_NUMBER = 3
  final val NOT_IN_FIELD_NUMBER = 4
  final val EXAMPLE_FIELD_NUMBER = 5
  def of(
    const: _root_.scala.Option[_root_.scala.Int],
    definedOnly: _root_.scala.Option[_root_.scala.Boolean],
    in: _root_.scala.Seq[_root_.scala.Int],
    notIn: _root_.scala.Seq[_root_.scala.Int],
    example: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.build.buf.validate.validate.EnumRules = _root_.build.buf.validate.validate.EnumRules(
    const,
    definedOnly,
    in,
    notIn,
    example
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.EnumRules])
}
