// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** MapRules describe the rules applied to `map` values.
  *
  * @param minPairs
  *  Specifies the minimum number of key-value pairs allowed. If the field has
  *   fewer key-value pairs than specified, an error message is generated.
  *  
  *   ```proto
  *   message MyMap {
  *     // The field `value` must have at least 2 key-value pairs.
  *     map&lt;string, string&gt; value = 1 [(buf.validate.field).map.min_pairs = 2];
  *   }
  *   ```
  * @param maxPairs
  *  Specifies the maximum number of key-value pairs allowed. If the field has
  *   more key-value pairs than specified, an error message is generated.
  *  
  *   ```proto
  *   message MyMap {
  *     // The field `value` must have at most 3 key-value pairs.
  *     map&lt;string, string&gt; value = 1 [(buf.validate.field).map.max_pairs = 3];
  *   }
  *   ```
  * @param keys
  *  Specifies the rules to be applied to each key in the field.
  *  
  *   Note that map keys are always considered populated. The `required`
  *   rule does not apply.
  *  
  *   ```proto
  *   message MyMap {
  *     // The keys in the field `value` must follow the specified rules.
  *     map&lt;string, string&gt; value = 1 [(buf.validate.field).map.keys = {
  *       string: {
  *         min_len: 3
  *         max_len: 10
  *       }
  *     }];
  *   }
  *   ```
  * @param values
  *  Specifies the rules to be applied to the value of each key in the
  *   field. Message values will still have their validations evaluated unless
  *  skip is specified here.
  *  
  *   Note that map values are always considered populated. The `required`
  *   rule does not apply.
  *  
  *   ```proto
  *   message MyMap {
  *     // The values in the field `value` must follow the specified rules.
  *     map&lt;string, string&gt; value = 1 [(buf.validate.field).map.values = {
  *       string: {
  *         min_len: 5
  *         max_len: 20
  *       }
  *     }];
  *   }
  *   ```
  */
@SerialVersionUID(0L)
final case class MapRules(
    minPairs: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    maxPairs: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    keys: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None,
    values: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MapRules] with _root_.scalapb.ExtendableMessage[MapRules] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (minPairs.isDefined) {
        val __value = minPairs.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
      };
      if (maxPairs.isDefined) {
        val __value = maxPairs.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
      };
      if (keys.isDefined) {
        val __value = keys.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (values.isDefined) {
        val __value = values.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      minPairs.foreach { __v =>
        val __m = __v
        _output__.writeUInt64(1, __m)
      };
      maxPairs.foreach { __v =>
        val __m = __v
        _output__.writeUInt64(2, __m)
      };
      keys.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      values.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getMinPairs: _root_.scala.Long = minPairs.getOrElse(0L)
    def clearMinPairs: MapRules = copy(minPairs = _root_.scala.None)
    def withMinPairs(__v: _root_.scala.Long): MapRules = copy(minPairs = Option(__v))
    def getMaxPairs: _root_.scala.Long = maxPairs.getOrElse(0L)
    def clearMaxPairs: MapRules = copy(maxPairs = _root_.scala.None)
    def withMaxPairs(__v: _root_.scala.Long): MapRules = copy(maxPairs = Option(__v))
    def getKeys: build.buf.validate.validate.FieldRules = keys.getOrElse(build.buf.validate.validate.FieldRules.defaultInstance)
    def clearKeys: MapRules = copy(keys = _root_.scala.None)
    def withKeys(__v: build.buf.validate.validate.FieldRules): MapRules = copy(keys = Option(__v))
    def getValues: build.buf.validate.validate.FieldRules = values.getOrElse(build.buf.validate.validate.FieldRules.defaultInstance)
    def clearValues: MapRules = copy(values = _root_.scala.None)
    def withValues(__v: build.buf.validate.validate.FieldRules): MapRules = copy(values = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => minPairs.orNull
        case 2 => maxPairs.orNull
        case 4 => keys.orNull
        case 5 => values.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => minPairs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => maxPairs.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => keys.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => values.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.MapRules.type = build.buf.validate.validate.MapRules
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.MapRules])
}

object MapRules extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.MapRules] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.MapRules] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.MapRules = {
    var __minPairs: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __maxPairs: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __keys: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None
    var __values: _root_.scala.Option[build.buf.validate.validate.FieldRules] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __minPairs = _root_.scala.Option(_input__.readUInt64())
        case 16 =>
          __maxPairs = _root_.scala.Option(_input__.readUInt64())
        case 34 =>
          __keys = _root_.scala.Option(__keys.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FieldRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __values = _root_.scala.Option(__values.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FieldRules](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.MapRules(
        minPairs = __minPairs,
        maxPairs = __maxPairs,
        keys = __keys,
        values = __values,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.MapRules] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.MapRules(
        minPairs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        maxPairs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        keys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FieldRules]]),
        values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FieldRules]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = build.buf.validate.validate.FieldRules
      case 5 => __out = build.buf.validate.validate.FieldRules
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.MapRules(
    minPairs = _root_.scala.None,
    maxPairs = _root_.scala.None,
    keys = _root_.scala.None,
    values = _root_.scala.None
  )
  implicit class MapRulesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.MapRules]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.MapRules](_l) {
    def minPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMinPairs)((c_, f_) => c_.copy(minPairs = _root_.scala.Option(f_)))
    def optionalMinPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.minPairs)((c_, f_) => c_.copy(minPairs = f_))
    def maxPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMaxPairs)((c_, f_) => c_.copy(maxPairs = _root_.scala.Option(f_)))
    def optionalMaxPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.maxPairs)((c_, f_) => c_.copy(maxPairs = f_))
    def keys: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldRules] = field(_.getKeys)((c_, f_) => c_.copy(keys = _root_.scala.Option(f_)))
    def optionalKeys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.FieldRules]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
    def values: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldRules] = field(_.getValues)((c_, f_) => c_.copy(values = _root_.scala.Option(f_)))
    def optionalValues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.FieldRules]] = field(_.values)((c_, f_) => c_.copy(values = f_))
  }
  final val MIN_PAIRS_FIELD_NUMBER = 1
  final val MAX_PAIRS_FIELD_NUMBER = 2
  final val KEYS_FIELD_NUMBER = 4
  final val VALUES_FIELD_NUMBER = 5
  def of(
    minPairs: _root_.scala.Option[_root_.scala.Long],
    maxPairs: _root_.scala.Option[_root_.scala.Long],
    keys: _root_.scala.Option[build.buf.validate.validate.FieldRules],
    values: _root_.scala.Option[build.buf.validate.validate.FieldRules]
  ): _root_.build.buf.validate.validate.MapRules = _root_.build.buf.validate.validate.MapRules(
    minPairs,
    maxPairs,
    keys,
    values
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.MapRules])
}
