// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package build.buf.validate.validate

/** `Violation` represents a single instance where a validation rule, expressed
  * as a `Rule`, was not met. It provides information about the field that
  * caused the violation, the specific rule that wasn't fulfilled, and a
  * human-readable error message.
  *
  * ```json
  * {
  *   "fieldPath": "bar",
  *   "ruleId": "foo.bar",
  *   "message": "bar must be greater than 0"
  * }
  * ```
  *
  * @param field
  *   `field` is a machine-readable path to the field that failed validation.
  *   This could be a nested field, in which case the path will include all the parent fields leading to the actual field that caused the violation.
  *  
  *   For example, consider the following message:
  *  
  *   ```proto
  *   message Message {
  *     bool a = 1 [(buf.validate.field).required = true];
  *   }
  *   ```
  *  
  *   It could produce the following violation:
  *  
  *   ```textproto
  *   violation {
  *     field { element { field_number: 1, field_name: "a", field_type: 8 } }
  *     ...
  *   }
  *   ```
  * @param rule
  *   `rule` is a machine-readable path that points to the specific rule rule that failed validation.
  *   This will be a nested field starting from the FieldRules of the field that failed validation.
  *   For custom rules, this will provide the path of the rule, e.g. `cel[0]`.
  *  
  *   For example, consider the following message:
  *  
  *   ```proto
  *   message Message {
  *     bool a = 1 [(buf.validate.field).required = true];
  *     bool b = 2 [(buf.validate.field).cel = {
  *       id: "custom_rule",
  *       expression: "!this ? 'b must be true': ''"
  *     }]
  *   }
  *   ```
  *  
  *   It could produce the following violations:
  *  
  *   ```textproto
  *   violation {
  *     rule { element { field_number: 25, field_name: "required", field_type: 8 } }
  *     ...
  *   }
  *   violation {
  *     rule { element { field_number: 23, field_name: "cel", field_type: 11, index: 0 } }
  *     ...
  *   }
  *   ```
  * @param ruleId
  *   `rule_id` is the unique identifier of the `Rule` that was not fulfilled.
  *   This is the same `id` that was specified in the `Rule` message, allowing easy tracing of which rule was violated.
  * @param message
  *   `message` is a human-readable error message that describes the nature of the violation.
  *   This can be the default error message from the violated `Rule`, or it can be a custom message that gives more context about the violation.
  * @param forKey
  *   `for_key` indicates whether the violation was caused by a map key, rather than a value.
  */
@SerialVersionUID(0L)
final case class Violation(
    field: _root_.scala.Option[build.buf.validate.validate.FieldPath] = _root_.scala.None,
    rule: _root_.scala.Option[build.buf.validate.validate.FieldPath] = _root_.scala.None,
    ruleId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    message: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    forKey: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Violation] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (field.isDefined) {
        val __value = field.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (rule.isDefined) {
        val __value = rule.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (ruleId.isDefined) {
        val __value = ruleId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (message.isDefined) {
        val __value = message.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (forKey.isDefined) {
        val __value = forKey.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ruleId.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      message.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      forKey.foreach { __v =>
        val __m = __v
        _output__.writeBool(4, __m)
      };
      field.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rule.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getField: build.buf.validate.validate.FieldPath = field.getOrElse(build.buf.validate.validate.FieldPath.defaultInstance)
    def clearField: Violation = copy(field = _root_.scala.None)
    def withField(__v: build.buf.validate.validate.FieldPath): Violation = copy(field = Option(__v))
    def getRule: build.buf.validate.validate.FieldPath = rule.getOrElse(build.buf.validate.validate.FieldPath.defaultInstance)
    def clearRule: Violation = copy(rule = _root_.scala.None)
    def withRule(__v: build.buf.validate.validate.FieldPath): Violation = copy(rule = Option(__v))
    def getRuleId: _root_.scala.Predef.String = ruleId.getOrElse("")
    def clearRuleId: Violation = copy(ruleId = _root_.scala.None)
    def withRuleId(__v: _root_.scala.Predef.String): Violation = copy(ruleId = Option(__v))
    def getMessage: _root_.scala.Predef.String = message.getOrElse("")
    def clearMessage: Violation = copy(message = _root_.scala.None)
    def withMessage(__v: _root_.scala.Predef.String): Violation = copy(message = Option(__v))
    def getForKey: _root_.scala.Boolean = forKey.getOrElse(false)
    def clearForKey: Violation = copy(forKey = _root_.scala.None)
    def withForKey(__v: _root_.scala.Boolean): Violation = copy(forKey = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 5 => field.orNull
        case 6 => rule.orNull
        case 2 => ruleId.orNull
        case 3 => message.orNull
        case 4 => forKey.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 5 => field.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => rule.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => ruleId.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => message.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => forKey.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: build.buf.validate.validate.Violation.type = build.buf.validate.validate.Violation
    // @@protoc_insertion_point(GeneratedMessage[buf.validate.Violation])
}

object Violation extends scalapb.GeneratedMessageCompanion[build.buf.validate.validate.Violation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[build.buf.validate.validate.Violation] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): build.buf.validate.validate.Violation = {
    var __field: _root_.scala.Option[build.buf.validate.validate.FieldPath] = _root_.scala.None
    var __rule: _root_.scala.Option[build.buf.validate.validate.FieldPath] = _root_.scala.None
    var __ruleId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __message: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __forKey: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 42 =>
          __field = _root_.scala.Option(__field.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FieldPath](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __rule = _root_.scala.Option(__rule.fold(_root_.scalapb.LiteParser.readMessage[build.buf.validate.validate.FieldPath](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __ruleId = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 26 =>
          __message = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 32 =>
          __forKey = _root_.scala.Option(_input__.readBool())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    build.buf.validate.validate.Violation(
        field = __field,
        rule = __rule,
        ruleId = __ruleId,
        message = __message,
        forKey = __forKey,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[build.buf.validate.validate.Violation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      build.buf.validate.validate.Violation(
        field = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FieldPath]]),
        rule = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[build.buf.validate.validate.FieldPath]]),
        ruleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        forKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidateProto.javaDescriptor.getMessageTypes().get(27)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidateProto.scalaDescriptor.messages(27)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = build.buf.validate.validate.FieldPath
      case 6 => __out = build.buf.validate.validate.FieldPath
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = build.buf.validate.validate.Violation(
    field = _root_.scala.None,
    rule = _root_.scala.None,
    ruleId = _root_.scala.None,
    message = _root_.scala.None,
    forKey = _root_.scala.None
  )
  implicit class ViolationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.Violation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, build.buf.validate.validate.Violation](_l) {
    def field: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldPath] = field(_.getField)((c_, f_) => c_.copy(field = _root_.scala.Option(f_)))
    def optionalField: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.FieldPath]] = field(_.field)((c_, f_) => c_.copy(field = f_))
    def rule: _root_.scalapb.lenses.Lens[UpperPB, build.buf.validate.validate.FieldPath] = field(_.getRule)((c_, f_) => c_.copy(rule = _root_.scala.Option(f_)))
    def optionalRule: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[build.buf.validate.validate.FieldPath]] = field(_.rule)((c_, f_) => c_.copy(rule = f_))
    def ruleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRuleId)((c_, f_) => c_.copy(ruleId = _root_.scala.Option(f_)))
    def optionalRuleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.ruleId)((c_, f_) => c_.copy(ruleId = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMessage)((c_, f_) => c_.copy(message = _root_.scala.Option(f_)))
    def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def forKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getForKey)((c_, f_) => c_.copy(forKey = _root_.scala.Option(f_)))
    def optionalForKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.forKey)((c_, f_) => c_.copy(forKey = f_))
  }
  final val FIELD_FIELD_NUMBER = 5
  final val RULE_FIELD_NUMBER = 6
  final val RULE_ID_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 3
  final val FOR_KEY_FIELD_NUMBER = 4
  def of(
    field: _root_.scala.Option[build.buf.validate.validate.FieldPath],
    rule: _root_.scala.Option[build.buf.validate.validate.FieldPath],
    ruleId: _root_.scala.Option[_root_.scala.Predef.String],
    message: _root_.scala.Option[_root_.scala.Predef.String],
    forKey: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.build.buf.validate.validate.Violation = _root_.build.buf.validate.validate.Violation(
    field,
    rule,
    ruleId,
    message,
    forKey
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[buf.validate.Violation])
}
